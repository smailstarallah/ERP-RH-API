package ma.digitalia.systemalert.controller;

import ma.digitalia.systemalert.event.AlerteCreatedEvent;
import ma.digitalia.systemalert.event.AlerteDeletedEvent;
import ma.digitalia.systemalert.event.AlerteUpdatedEvent;
import ma.digitalia.systemalert.model.dto.AlerteDTO;
import ma.digitalia.systemalert.model.enums.TypeAlerte;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.event.EventListener;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;

import java.util.Map;

/**
 * Contr√¥leur WebSocket pour la diffusion des notifications en temps r√©el.
 * Ce contr√¥leur √©coute les √©v√©nements de l'application (cr√©ation, mise √† jour, suppression)
 * et envoie des messages cibl√©s aux clients WebSocket.
 */
@Controller
public class AlerteWebSocketController {

    private static final Logger logger = LoggerFactory.getLogger(AlerteWebSocketController.class);

    private final SimpMessagingTemplate messagingTemplate;

    @Autowired
    public AlerteWebSocketController(SimpMessagingTemplate messagingTemplate) {
        this.messagingTemplate = messagingTemplate;
    }

    /**
     * √âcoute les √©v√©nements de cr√©ation d'alerte et notifie les clients.
     */
    @EventListener
    public void handleAlerteCreated(AlerteCreatedEvent event) {
        AlerteDTO alerte = event.getAlerte();
        logger.info("üö® [CR√âATION] √âv√©nement re√ßu - Envoi notification pour alerte ID: {}", alerte.getId());

        try {
            // Notification personnelle √† l'utilisateur concern√©
            String userTopic = "/topic/alertes/employe/" + alerte.getUserId();
            messagingTemplate.convertAndSend(userTopic, alerte);
            logger.info("‚úÖ Notification personnelle envoy√©e √† l'utilisateur {} sur {}", alerte.getUserId(), userTopic);

            // Notification globale pour les managers
            if (alerte.getType() == TypeAlerte.WARNING || alerte.getType() == TypeAlerte.ERROR) {
                String globalTopic = "/topic/alertes/global";
                messagingTemplate.convertAndSend(globalTopic, alerte);
                logger.info("‚úÖ Notification globale envoy√©e sur {} pour alerte de type {}", globalTopic, alerte.getType());
            }

            // Mise √† jour des statistiques pour les dashboards
            sendStatsUpdate(alerte.getUserId());
        } catch (Exception e) {
            logger.error("‚ùå Erreur lors de l'envoi des notifications de CR√âATION pour l'alerte ID: {}", alerte.getId(), e);
        }
    }

    /**
     * √âcoute les √©v√©nements de mise √† jour d'alerte (ex: marquer comme lue) et notifie les clients.
     */
    @EventListener
    public void handleAlerteUpdated(AlerteUpdatedEvent event) {
        AlerteDTO alerte = event.getAlerte();
        logger.info("üîÑ [MISE √Ä JOUR] √âv√©nement re√ßu - Envoi notification pour alerte ID: {}", alerte.getId());

        try {
            // Notifier l'utilisateur que son alerte a √©t√© mise √† jour
            String userTopic = "/topic/alertes/employe/" + alerte.getUserId();
            messagingTemplate.convertAndSend(userTopic, alerte);
            logger.info("‚úÖ Notification de mise √† jour envoy√©e √† l'utilisateur {} sur {}", alerte.getUserId(), userTopic);

            // Notifier √©galement les dashboards globaux pour qu'ils se rafra√Æchissent
            String globalTopic = "/topic/alertes/global";
            messagingTemplate.convertAndSend(globalTopic, alerte);
            logger.info("‚úÖ Notification de mise √† jour globale envoy√©e sur {}", globalTopic);

            // Mise √† jour des statistiques (le nombre d'alertes non lues a chang√©)
            sendStatsUpdate(alerte.getUserId());
        } catch (Exception e) {
            logger.error("‚ùå Erreur lors de l'envoi des notifications de MISE √Ä JOUR pour l'alerte ID: {}", alerte.getId(), e);
        }
    }

    /**
     * √âcoute les √©v√©nements de suppression d'alerte et notifie les clients pour qu'ils retirent l'alerte de l'UI.
     */
    @EventListener
    public void handleAlerteDeleted(AlerteDeletedEvent event) {
        Long alerteId = event.getAlerteId();
        Long userId = event.getUserId();
        logger.info("üóëÔ∏è [SUPPRESSION] √âv√©nement re√ßu - Envoi notification pour alerte ID: {}", alerteId);

        try {
            // Cr√©er un payload simple pour l'action de suppression
            Map<String, Object> deletePayload = Map.of("action", "DELETE", "alerteId", alerteId);

            // Notifier l'utilisateur pour qu'il retire l'alerte de sa liste
            String userTopic = "/topic/alertes/employe/" + userId;
            messagingTemplate.convertAndSend(userTopic, deletePayload);
            logger.info("‚úÖ Notification de suppression envoy√©e √† l'utilisateur {} sur {}", userId, userTopic);

            // Notifier les dashboards globaux
            String globalTopic = "/topic/alertes/global";
            messagingTemplate.convertAndSend(globalTopic, deletePayload);
            logger.info("‚úÖ Notification de suppression globale envoy√©e sur {}", globalTopic);

            // Mise √† jour des statistiques
            sendStatsUpdate(userId);
        } catch (Exception e) {
            logger.error("‚ùå Erreur lors de l'envoi des notifications de SUPPRESSION pour l'alerte ID: {}", alerteId, e);
        }
    }

    /**
     * Envoie une mise √† jour des statistiques pour les dashboards.
     */
    private void sendStatsUpdate(Long userId) {
        try {
            var statsUpdate = Map.of(
                    "type", "STATS_UPDATE",
                    "userId", userId, // Peut √™tre utilis√© pour des stats par utilisateur ou "global"
                    "timestamp", java.time.LocalDateTime.now().toString()
            );
            messagingTemplate.convertAndSend("/topic/alertes/stats", statsUpdate);
            logger.info("üìä Mise √† jour des statistiques envoy√©e pour l'utilisateur {}", userId);
        } catch (Exception e) {
            logger.error("‚ùå Erreur lors de l'envoi des statistiques:", e);
        }
    }
}